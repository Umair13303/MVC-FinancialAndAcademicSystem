//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace office360.Models.EDMX
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SESEntities : DbContext
    {
        public SESEntities()
            : base("name=SESEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<BM_Branch> BM_Branch { get; set; }
        public virtual DbSet<BM_BranchSetting> BM_BranchSetting { get; set; }
        public virtual DbSet<CM_Company> CM_Company { get; set; }
        public virtual DbSet<RSM_RightSetting> RSM_RightSetting { get; set; }
        public virtual DbSet<UM_User> UM_User { get; set; }
        public virtual DbSet<URM_UserRight> URM_UserRight { get; set; }
        public virtual DbSet<AdmissionCatagory> AdmissionCatagory { get; set; }
        public virtual DbSet<BillingMethod> BillingMethod { get; set; }
        public virtual DbSet<CampusType> CampusType { get; set; }
        public virtual DbSet<ChallanMethod> ChallanMethod { get; set; }
        public virtual DbSet<ChallanType> ChallanType { get; set; }
        public virtual DbSet<ChargingMethod> ChargingMethod { get; set; }
        public virtual DbSet<City> City { get; set; }
        public virtual DbSet<CoaCatagory> CoaCatagory { get; set; }
        public virtual DbSet<CoaType> CoaType { get; set; }
        public virtual DbSet<Country> Country { get; set; }
        public virtual DbSet<DocType> DocType { get; set; }
        public virtual DbSet<DocumentStatus> DocumentStatus { get; set; }
        public virtual DbSet<EducationBoard> EducationBoard { get; set; }
        public virtual DbSet<EnrollmentType> EnrollmentType { get; set; }
        public virtual DbSet<ExportClass> ExportClass { get; set; }
        public virtual DbSet<FeeCatagory> FeeCatagory { get; set; }
        public virtual DbSet<Gender> Gender { get; set; }
        public virtual DbSet<MartialStatus> MartialStatus { get; set; }
        public virtual DbSet<Occupation> Occupation { get; set; }
        public virtual DbSet<OrganizationType> OrganizationType { get; set; }
        public virtual DbSet<PolicyPeriod> PolicyPeriod { get; set; }
        public virtual DbSet<RegistrationType> RegistrationType { get; set; }
        public virtual DbSet<Relationship> Relationship { get; set; }
        public virtual DbSet<Religion> Religion { get; set; }
        public virtual DbSet<Right> Right { get; set; }
        public virtual DbSet<Role> Role { get; set; }
        public virtual DbSet<RollCallSystem> RollCallSystem { get; set; }
        public virtual DbSet<StudyGroup> StudyGroup { get; set; }
        public virtual DbSet<StudyLevel> StudyLevel { get; set; }
        public virtual DbSet<URLType> URLType { get; set; }
        public virtual DbSet<WHTaxPolicy> WHTaxPolicy { get; set; }
        public virtual DbSet<WorkingShift> WorkingShift { get; set; }
    
        [DbFunction("SESEntities", "fn_CodeSplitByCommaAsINT")]
        public virtual IQueryable<fn_CodeSplitByCommaAsINT_Result> fn_CodeSplitByCommaAsINT(string psCSString)
        {
            var psCSStringParameter = psCSString != null ?
                new ObjectParameter("psCSString", psCSString) :
                new ObjectParameter("psCSString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_CodeSplitByCommaAsINT_Result>("[SESEntities].[fn_CodeSplitByCommaAsINT](@psCSString)", psCSStringParameter);
        }
    
        [DbFunction("SESEntities", "fn_CodeSplitByCommaAsUniqueIdentifier")]
        public virtual IQueryable<fn_CodeSplitByCommaAsUniqueIdentifier_Result> fn_CodeSplitByCommaAsUniqueIdentifier(string psCSString)
        {
            var psCSStringParameter = psCSString != null ?
                new ObjectParameter("psCSString", psCSString) :
                new ObjectParameter("psCSString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_CodeSplitByCommaAsUniqueIdentifier_Result>("[SESEntities].[fn_CodeSplitByCommaAsUniqueIdentifier](@psCSString)", psCSStringParameter);
        }
    
        [DbFunction("SESEntities", "fn_GetCommaSepratedValuesInList")]
        public virtual IQueryable<fn_GetCommaSepratedValuesInList_Result> fn_GetCommaSepratedValuesInList(string psCSString)
        {
            var psCSStringParameter = psCSString != null ?
                new ObjectParameter("psCSString", psCSString) :
                new ObjectParameter("psCSString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_GetCommaSepratedValuesInList_Result>("[SESEntities].[fn_GetCommaSepratedValuesInList](@psCSString)", psCSStringParameter);
        }
    
        [DbFunction("SESEntities", "fn_GetGeneralBranchSettingForCampus")]
        public virtual IQueryable<fn_GetGeneralBranchSettingForCampus_Result> fn_GetGeneralBranchSettingForCampus(Nullable<int> campusId)
        {
            var campusIdParameter = campusId.HasValue ?
                new ObjectParameter("CampusId", campusId) :
                new ObjectParameter("CampusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_GetGeneralBranchSettingForCampus_Result>("[SESEntities].[fn_GetGeneralBranchSettingForCampus](@CampusId)", campusIdParameter);
        }
    
        public virtual ObjectResult<BM_Branch_GetListByParam_Result> BM_Branch_GetListByParam(string dB_IF_PARAM, Nullable<int> sessionCompanyId, Nullable<int> sessionBranchId, string allowedCampusIds, string searchParameter, Nullable<int> companyId)
        {
            var dB_IF_PARAMParameter = dB_IF_PARAM != null ?
                new ObjectParameter("DB_IF_PARAM", dB_IF_PARAM) :
                new ObjectParameter("DB_IF_PARAM", typeof(string));
    
            var sessionCompanyIdParameter = sessionCompanyId.HasValue ?
                new ObjectParameter("SessionCompanyId", sessionCompanyId) :
                new ObjectParameter("SessionCompanyId", typeof(int));
    
            var sessionBranchIdParameter = sessionBranchId.HasValue ?
                new ObjectParameter("SessionBranchId", sessionBranchId) :
                new ObjectParameter("SessionBranchId", typeof(int));
    
            var allowedCampusIdsParameter = allowedCampusIds != null ?
                new ObjectParameter("AllowedCampusIds", allowedCampusIds) :
                new ObjectParameter("AllowedCampusIds", typeof(string));
    
            var searchParameterParameter = searchParameter != null ?
                new ObjectParameter("SearchParameter", searchParameter) :
                new ObjectParameter("SearchParameter", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BM_Branch_GetListByParam_Result>("BM_Branch_GetListByParam", dB_IF_PARAMParameter, sessionCompanyIdParameter, sessionBranchIdParameter, allowedCampusIdsParameter, searchParameterParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<BM_Branch_GetListBySearch_Result> BM_Branch_GetListBySearch(Nullable<int> companyId, Nullable<int> branchId, Nullable<int> inputTypeId, string inputText)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var inputTypeIdParameter = inputTypeId.HasValue ?
                new ObjectParameter("InputTypeId", inputTypeId) :
                new ObjectParameter("InputTypeId", typeof(int));
    
            var inputTextParameter = inputText != null ?
                new ObjectParameter("InputText", inputText) :
                new ObjectParameter("InputText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BM_Branch_GetListBySearch_Result>("BM_Branch_GetListBySearch", companyIdParameter, branchIdParameter, inputTypeIdParameter, inputTextParameter);
        }
    
        public virtual int BM_Branch_Upsert(string dB_OperationType, Nullable<System.Guid> guID, string description, Nullable<int> campusTypeId, Nullable<int> organizationTypeId, Nullable<int> countryId, Nullable<int> cityId, string address, string contactNo, string emailAddress, string nTNNo, string remarks, Nullable<System.DateTime> createdOn, Nullable<int> createdBy, Nullable<System.DateTime> updatedOn, Nullable<int> updatedBy, Nullable<int> documentStatus, Nullable<int> docType, Nullable<bool> status, Nullable<int> branchId, Nullable<int> companyId, ObjectParameter response, ObjectParameter campusId)
        {
            var dB_OperationTypeParameter = dB_OperationType != null ?
                new ObjectParameter("DB_OperationType", dB_OperationType) :
                new ObjectParameter("DB_OperationType", typeof(string));
    
            var guIDParameter = guID.HasValue ?
                new ObjectParameter("GuID", guID) :
                new ObjectParameter("GuID", typeof(System.Guid));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var campusTypeIdParameter = campusTypeId.HasValue ?
                new ObjectParameter("CampusTypeId", campusTypeId) :
                new ObjectParameter("CampusTypeId", typeof(int));
    
            var organizationTypeIdParameter = organizationTypeId.HasValue ?
                new ObjectParameter("OrganizationTypeId", organizationTypeId) :
                new ObjectParameter("OrganizationTypeId", typeof(int));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var nTNNoParameter = nTNNo != null ?
                new ObjectParameter("NTNNo", nTNNo) :
                new ObjectParameter("NTNNo", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var documentStatusParameter = documentStatus.HasValue ?
                new ObjectParameter("DocumentStatus", documentStatus) :
                new ObjectParameter("DocumentStatus", typeof(int));
    
            var docTypeParameter = docType.HasValue ?
                new ObjectParameter("DocType", docType) :
                new ObjectParameter("DocType", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BM_Branch_Upsert", dB_OperationTypeParameter, guIDParameter, descriptionParameter, campusTypeIdParameter, organizationTypeIdParameter, countryIdParameter, cityIdParameter, addressParameter, contactNoParameter, emailAddressParameter, nTNNoParameter, remarksParameter, createdOnParameter, createdByParameter, updatedOnParameter, updatedByParameter, documentStatusParameter, docTypeParameter, statusParameter, branchIdParameter, companyIdParameter, response, campusId);
        }
    
        public virtual int BM_BranchSetting_Upsert(string dB_OperationType, Nullable<System.Guid> guID, Nullable<int> campusId, Nullable<int> rollCallSystemId, Nullable<int> billingMethodId, string studyLevelIds, string studyGroupIds, Nullable<int> policyPeriodId, Nullable<int> challanMethodId, Nullable<System.DateTime> createdOn, Nullable<int> createdBy, Nullable<System.DateTime> updatedOn, Nullable<int> updatedBy, Nullable<int> docType, Nullable<int> documentStatus, Nullable<bool> status, Nullable<int> branchId, Nullable<int> companyId, ObjectParameter response)
        {
            var dB_OperationTypeParameter = dB_OperationType != null ?
                new ObjectParameter("DB_OperationType", dB_OperationType) :
                new ObjectParameter("DB_OperationType", typeof(string));
    
            var guIDParameter = guID.HasValue ?
                new ObjectParameter("GuID", guID) :
                new ObjectParameter("GuID", typeof(System.Guid));
    
            var campusIdParameter = campusId.HasValue ?
                new ObjectParameter("CampusId", campusId) :
                new ObjectParameter("CampusId", typeof(int));
    
            var rollCallSystemIdParameter = rollCallSystemId.HasValue ?
                new ObjectParameter("RollCallSystemId", rollCallSystemId) :
                new ObjectParameter("RollCallSystemId", typeof(int));
    
            var billingMethodIdParameter = billingMethodId.HasValue ?
                new ObjectParameter("BillingMethodId", billingMethodId) :
                new ObjectParameter("BillingMethodId", typeof(int));
    
            var studyLevelIdsParameter = studyLevelIds != null ?
                new ObjectParameter("StudyLevelIds", studyLevelIds) :
                new ObjectParameter("StudyLevelIds", typeof(string));
    
            var studyGroupIdsParameter = studyGroupIds != null ?
                new ObjectParameter("StudyGroupIds", studyGroupIds) :
                new ObjectParameter("StudyGroupIds", typeof(string));
    
            var policyPeriodIdParameter = policyPeriodId.HasValue ?
                new ObjectParameter("PolicyPeriodId", policyPeriodId) :
                new ObjectParameter("PolicyPeriodId", typeof(int));
    
            var challanMethodIdParameter = challanMethodId.HasValue ?
                new ObjectParameter("ChallanMethodId", challanMethodId) :
                new ObjectParameter("ChallanMethodId", typeof(int));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var docTypeParameter = docType.HasValue ?
                new ObjectParameter("DocType", docType) :
                new ObjectParameter("DocType", typeof(int));
    
            var documentStatusParameter = documentStatus.HasValue ?
                new ObjectParameter("DocumentStatus", documentStatus) :
                new ObjectParameter("DocumentStatus", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BM_BranchSetting_Upsert", dB_OperationTypeParameter, guIDParameter, campusIdParameter, rollCallSystemIdParameter, billingMethodIdParameter, studyLevelIdsParameter, studyGroupIdsParameter, policyPeriodIdParameter, challanMethodIdParameter, createdOnParameter, createdByParameter, updatedOnParameter, updatedByParameter, docTypeParameter, documentStatusParameter, statusParameter, branchIdParameter, companyIdParameter, response);
        }
    
        public virtual ObjectResult<CM_Company_GetDetailByParam_Result> CM_Company_GetDetailByParam(string dB_IF_PARAM, Nullable<int> companyId, string searchParameter)
        {
            var dB_IF_PARAMParameter = dB_IF_PARAM != null ?
                new ObjectParameter("DB_IF_PARAM", dB_IF_PARAM) :
                new ObjectParameter("DB_IF_PARAM", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var searchParameterParameter = searchParameter != null ?
                new ObjectParameter("SearchParameter", searchParameter) :
                new ObjectParameter("SearchParameter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CM_Company_GetDetailByParam_Result>("CM_Company_GetDetailByParam", dB_IF_PARAMParameter, companyIdParameter, searchParameterParameter);
        }
    
        public virtual ObjectResult<CM_Company_GetListByParam_Result> CM_Company_GetListByParam(string dB_IF_PARAM, Nullable<int> sessionCompanyId, string allowedCampusIds, string searchParameter, Nullable<int> companyId)
        {
            var dB_IF_PARAMParameter = dB_IF_PARAM != null ?
                new ObjectParameter("DB_IF_PARAM", dB_IF_PARAM) :
                new ObjectParameter("DB_IF_PARAM", typeof(string));
    
            var sessionCompanyIdParameter = sessionCompanyId.HasValue ?
                new ObjectParameter("SessionCompanyId", sessionCompanyId) :
                new ObjectParameter("SessionCompanyId", typeof(int));
    
            var allowedCampusIdsParameter = allowedCampusIds != null ?
                new ObjectParameter("AllowedCampusIds", allowedCampusIds) :
                new ObjectParameter("AllowedCampusIds", typeof(string));
    
            var searchParameterParameter = searchParameter != null ?
                new ObjectParameter("SearchParameter", searchParameter) :
                new ObjectParameter("SearchParameter", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CM_Company_GetListByParam_Result>("CM_Company_GetListByParam", dB_IF_PARAMParameter, sessionCompanyIdParameter, allowedCampusIdsParameter, searchParameterParameter, companyIdParameter);
        }
    
        public virtual int CM_Company_Upsert(string dB_OperationType, Nullable<System.Guid> guID, string companyName, Nullable<int> cityId, Nullable<int> countryId, string addressLine, string phoneNumber, string emailAddress, string companyWebsite, string uploadLogo, Nullable<System.DateTime> createdOn, Nullable<int> createdBy, Nullable<System.DateTime> updatedOn, Nullable<int> updatedBy, Nullable<int> docType, Nullable<int> documentStatus, Nullable<bool> status, Nullable<int> branchId, Nullable<int> companyId, string remarks, ObjectParameter response)
        {
            var dB_OperationTypeParameter = dB_OperationType != null ?
                new ObjectParameter("DB_OperationType", dB_OperationType) :
                new ObjectParameter("DB_OperationType", typeof(string));
    
            var guIDParameter = guID.HasValue ?
                new ObjectParameter("GuID", guID) :
                new ObjectParameter("GuID", typeof(System.Guid));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            var addressLineParameter = addressLine != null ?
                new ObjectParameter("AddressLine", addressLine) :
                new ObjectParameter("AddressLine", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var companyWebsiteParameter = companyWebsite != null ?
                new ObjectParameter("CompanyWebsite", companyWebsite) :
                new ObjectParameter("CompanyWebsite", typeof(string));
    
            var uploadLogoParameter = uploadLogo != null ?
                new ObjectParameter("UploadLogo", uploadLogo) :
                new ObjectParameter("UploadLogo", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var docTypeParameter = docType.HasValue ?
                new ObjectParameter("DocType", docType) :
                new ObjectParameter("DocType", typeof(int));
    
            var documentStatusParameter = documentStatus.HasValue ?
                new ObjectParameter("DocumentStatus", documentStatus) :
                new ObjectParameter("DocumentStatus", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CM_Company_Upsert", dB_OperationTypeParameter, guIDParameter, companyNameParameter, cityIdParameter, countryIdParameter, addressLineParameter, phoneNumberParameter, emailAddressParameter, companyWebsiteParameter, uploadLogoParameter, createdOnParameter, createdByParameter, updatedOnParameter, updatedByParameter, docTypeParameter, documentStatusParameter, statusParameter, branchIdParameter, companyIdParameter, remarksParameter, response);
        }
    
        public virtual ObjectResult<LK_ChallanMethod_GetListByParam_Result> LK_ChallanMethod_GetListByParam(string dB_IF_PARAM, Nullable<int> id)
        {
            var dB_IF_PARAMParameter = dB_IF_PARAM != null ?
                new ObjectParameter("DB_IF_PARAM", dB_IF_PARAM) :
                new ObjectParameter("DB_IF_PARAM", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LK_ChallanMethod_GetListByParam_Result>("LK_ChallanMethod_GetListByParam", dB_IF_PARAMParameter, idParameter);
        }
    
        public virtual ObjectResult<LK_StudyGroup_GetListByParam_Result> LK_StudyGroup_GetListByParam(string dB_IF_PARAM, Nullable<int> companyId, Nullable<int> campusId)
        {
            var dB_IF_PARAMParameter = dB_IF_PARAM != null ?
                new ObjectParameter("DB_IF_PARAM", dB_IF_PARAM) :
                new ObjectParameter("DB_IF_PARAM", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var campusIdParameter = campusId.HasValue ?
                new ObjectParameter("CampusId", campusId) :
                new ObjectParameter("CampusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LK_StudyGroup_GetListByParam_Result>("LK_StudyGroup_GetListByParam", dB_IF_PARAMParameter, companyIdParameter, campusIdParameter);
        }
    
        public virtual ObjectResult<LK_StudyLevel_GetListByParam_Result> LK_StudyLevel_GetListByParam(string dB_IF_PARAM, Nullable<int> companyId, Nullable<int> campusId)
        {
            var dB_IF_PARAMParameter = dB_IF_PARAM != null ?
                new ObjectParameter("DB_IF_PARAM", dB_IF_PARAM) :
                new ObjectParameter("DB_IF_PARAM", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var campusIdParameter = campusId.HasValue ?
                new ObjectParameter("CampusId", campusId) :
                new ObjectParameter("CampusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LK_StudyLevel_GetListByParam_Result>("LK_StudyLevel_GetListByParam", dB_IF_PARAMParameter, companyIdParameter, campusIdParameter);
        }
    
        public virtual ObjectResult<LK_WHTaxPolicy_GetListByParam_Result> LK_WHTaxPolicy_GetListByParam(string dB_IF_PARAM, Nullable<int> companyId, Nullable<int> branchId, Nullable<int> accFeeStructureId)
        {
            var dB_IF_PARAMParameter = dB_IF_PARAM != null ?
                new ObjectParameter("DB_IF_PARAM", dB_IF_PARAM) :
                new ObjectParameter("DB_IF_PARAM", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var accFeeStructureIdParameter = accFeeStructureId.HasValue ?
                new ObjectParameter("AccFeeStructureId", accFeeStructureId) :
                new ObjectParameter("AccFeeStructureId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LK_WHTaxPolicy_GetListByParam_Result>("LK_WHTaxPolicy_GetListByParam", dB_IF_PARAMParameter, companyIdParameter, branchIdParameter, accFeeStructureIdParameter);
        }
    
        public virtual ObjectResult<RSM_RightSetting_GetDetailByParam_Result> RSM_RightSetting_GetDetailByParam(string dB_IF_PARAM, string allowedCampusIds, Nullable<int> userId, Nullable<int> companyId, Nullable<int> uRLTypeId, Nullable<bool> status, string menu, Nullable<int> rightId, string rightPath)
        {
            var dB_IF_PARAMParameter = dB_IF_PARAM != null ?
                new ObjectParameter("DB_IF_PARAM", dB_IF_PARAM) :
                new ObjectParameter("DB_IF_PARAM", typeof(string));
    
            var allowedCampusIdsParameter = allowedCampusIds != null ?
                new ObjectParameter("AllowedCampusIds", allowedCampusIds) :
                new ObjectParameter("AllowedCampusIds", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var uRLTypeIdParameter = uRLTypeId.HasValue ?
                new ObjectParameter("URLTypeId", uRLTypeId) :
                new ObjectParameter("URLTypeId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var menuParameter = menu != null ?
                new ObjectParameter("Menu", menu) :
                new ObjectParameter("Menu", typeof(string));
    
            var rightIdParameter = rightId.HasValue ?
                new ObjectParameter("RightId", rightId) :
                new ObjectParameter("RightId", typeof(int));
    
            var rightPathParameter = rightPath != null ?
                new ObjectParameter("RightPath", rightPath) :
                new ObjectParameter("RightPath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RSM_RightSetting_GetDetailByParam_Result>("RSM_RightSetting_GetDetailByParam", dB_IF_PARAMParameter, allowedCampusIdsParameter, userIdParameter, companyIdParameter, uRLTypeIdParameter, statusParameter, menuParameter, rightIdParameter, rightPathParameter);
        }
    
        public virtual int RSM_RightSetting_Upsert(string dB_OperationType, Nullable<System.Guid> guID, Nullable<int> rightId, string description, Nullable<int> uRLTypeId, Nullable<System.DateTime> createdOn, Nullable<int> createdBy, Nullable<System.DateTime> updatedOn, Nullable<int> updatedBy, Nullable<int> docType, Nullable<int> documentStatus, Nullable<bool> status, Nullable<int> branchId, Nullable<int> companyId, string remarks, ObjectParameter response)
        {
            var dB_OperationTypeParameter = dB_OperationType != null ?
                new ObjectParameter("DB_OperationType", dB_OperationType) :
                new ObjectParameter("DB_OperationType", typeof(string));
    
            var guIDParameter = guID.HasValue ?
                new ObjectParameter("GuID", guID) :
                new ObjectParameter("GuID", typeof(System.Guid));
    
            var rightIdParameter = rightId.HasValue ?
                new ObjectParameter("RightId", rightId) :
                new ObjectParameter("RightId", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var uRLTypeIdParameter = uRLTypeId.HasValue ?
                new ObjectParameter("URLTypeId", uRLTypeId) :
                new ObjectParameter("URLTypeId", typeof(int));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var docTypeParameter = docType.HasValue ?
                new ObjectParameter("DocType", docType) :
                new ObjectParameter("DocType", typeof(int));
    
            var documentStatusParameter = documentStatus.HasValue ?
                new ObjectParameter("DocumentStatus", documentStatus) :
                new ObjectParameter("DocumentStatus", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RSM_RightSetting_Upsert", dB_OperationTypeParameter, guIDParameter, rightIdParameter, descriptionParameter, uRLTypeIdParameter, createdOnParameter, createdByParameter, updatedOnParameter, updatedByParameter, docTypeParameter, documentStatusParameter, statusParameter, branchIdParameter, companyIdParameter, remarksParameter, response);
        }
    
        public virtual ObjectResult<UM_User_GetDetailByParam_Result> UM_User_GetDetailByParam(string listCondition, Nullable<int> companyId, Nullable<bool> isLogIn, string userName, string password, Nullable<int> id)
        {
            var listConditionParameter = listCondition != null ?
                new ObjectParameter("ListCondition", listCondition) :
                new ObjectParameter("ListCondition", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var isLogInParameter = isLogIn.HasValue ?
                new ObjectParameter("IsLogIn", isLogIn) :
                new ObjectParameter("IsLogIn", typeof(bool));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UM_User_GetDetailByParam_Result>("UM_User_GetDetailByParam", listConditionParameter, companyIdParameter, isLogInParameter, userNameParameter, passwordParameter, idParameter);
        }
    
        public virtual ObjectResult<UM_User_GetListByParam_Result> UM_User_GetListByParam(string dB_IF_PARAM, Nullable<int> sessionCompanyId, string searchParameter, Nullable<int> companyId)
        {
            var dB_IF_PARAMParameter = dB_IF_PARAM != null ?
                new ObjectParameter("DB_IF_PARAM", dB_IF_PARAM) :
                new ObjectParameter("DB_IF_PARAM", typeof(string));
    
            var sessionCompanyIdParameter = sessionCompanyId.HasValue ?
                new ObjectParameter("SessionCompanyId", sessionCompanyId) :
                new ObjectParameter("SessionCompanyId", typeof(int));
    
            var searchParameterParameter = searchParameter != null ?
                new ObjectParameter("SearchParameter", searchParameter) :
                new ObjectParameter("SearchParameter", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UM_User_GetListByParam_Result>("UM_User_GetListByParam", dB_IF_PARAMParameter, sessionCompanyIdParameter, searchParameterParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<UM_User_GetListBySearch_Result> UM_User_GetListBySearch(Nullable<int> companyId, Nullable<int> branchId, Nullable<int> inputTypeId, string inputText)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var inputTypeIdParameter = inputTypeId.HasValue ?
                new ObjectParameter("InputTypeId", inputTypeId) :
                new ObjectParameter("InputTypeId", typeof(int));
    
            var inputTextParameter = inputText != null ?
                new ObjectParameter("InputText", inputText) :
                new ObjectParameter("InputText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UM_User_GetListBySearch_Result>("UM_User_GetListBySearch", companyIdParameter, branchIdParameter, inputTypeIdParameter, inputTextParameter);
        }
    
        public virtual int UM_User_Upsert(string dB_OperationType, Nullable<System.Guid> guID, string name, string userName, string password, string emailAddress, string mobileNumber, Nullable<int> employeeId, Nullable<int> roleId, string allowedCampusIds, Nullable<bool> isLogIn, Nullable<bool> isDeveloper, Nullable<System.DateTime> createdOn, Nullable<int> createdBy, Nullable<System.DateTime> updatedOn, Nullable<int> updatedBy, Nullable<int> docType, Nullable<int> documentStatus, Nullable<bool> status, Nullable<int> branchId, Nullable<int> companyId, string remarks, ObjectParameter response)
        {
            var dB_OperationTypeParameter = dB_OperationType != null ?
                new ObjectParameter("DB_OperationType", dB_OperationType) :
                new ObjectParameter("DB_OperationType", typeof(string));
    
            var guIDParameter = guID.HasValue ?
                new ObjectParameter("GuID", guID) :
                new ObjectParameter("GuID", typeof(System.Guid));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var allowedCampusIdsParameter = allowedCampusIds != null ?
                new ObjectParameter("AllowedCampusIds", allowedCampusIds) :
                new ObjectParameter("AllowedCampusIds", typeof(string));
    
            var isLogInParameter = isLogIn.HasValue ?
                new ObjectParameter("IsLogIn", isLogIn) :
                new ObjectParameter("IsLogIn", typeof(bool));
    
            var isDeveloperParameter = isDeveloper.HasValue ?
                new ObjectParameter("IsDeveloper", isDeveloper) :
                new ObjectParameter("IsDeveloper", typeof(bool));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var docTypeParameter = docType.HasValue ?
                new ObjectParameter("DocType", docType) :
                new ObjectParameter("DocType", typeof(int));
    
            var documentStatusParameter = documentStatus.HasValue ?
                new ObjectParameter("DocumentStatus", documentStatus) :
                new ObjectParameter("DocumentStatus", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UM_User_Upsert", dB_OperationTypeParameter, guIDParameter, nameParameter, userNameParameter, passwordParameter, emailAddressParameter, mobileNumberParameter, employeeIdParameter, roleIdParameter, allowedCampusIdsParameter, isLogInParameter, isDeveloperParameter, createdOnParameter, createdByParameter, updatedOnParameter, updatedByParameter, docTypeParameter, documentStatusParameter, statusParameter, branchIdParameter, companyIdParameter, remarksParameter, response);
        }
    }
}
